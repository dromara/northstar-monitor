/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var xyz_redtorch_pb_core_enum_pb = require('../../../xyz/redtorch/pb/core_enum_pb.js');
goog.exportSymbol('proto.xyz.redtorch.pb.AccountField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.BarField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.CancelOrderReqField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.CommonReqField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.CommonRspField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.ContractField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.GatewayField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.GatewaySettingField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.LogField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.NoticeField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.OrderField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.PositionField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.SubmitOrderReqField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.TickField', null, global);
goog.exportSymbol('proto.xyz.redtorch.pb.TradeField', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.GatewayField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.GatewayField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.GatewayField.displayName = 'proto.xyz.redtorch.pb.GatewayField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.GatewayField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.GatewayField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.GatewayField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.GatewayField.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gatewaytype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    gatewayadaptertype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0),
    autherrorflag: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.GatewayField}
 */
proto.xyz.redtorch.pb.GatewayField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.GatewayField;
  return proto.xyz.redtorch.pb.GatewayField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.GatewayField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.GatewayField}
 */
proto.xyz.redtorch.pb.GatewayField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {!proto.xyz.redtorch.pb.GatewayTypeEnum} */ (reader.readEnum());
      msg.setGatewaytype(value);
      break;
    case 5:
      var value = /** @type {!proto.xyz.redtorch.pb.GatewayAdapterTypeEnum} */ (reader.readEnum());
      msg.setGatewayadaptertype(value);
      break;
    case 6:
      var value = /** @type {!proto.xyz.redtorch.pb.ConnectStatusEnum} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutherrorflag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.GatewayField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.GatewayField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.GatewayField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.GatewayField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewayid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGatewaytype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getGatewayadaptertype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getAutherrorflag();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string gatewayId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewayField.prototype.getGatewayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewayField.prototype.setGatewayid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewayField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewayField.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewayField.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewayField.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional GatewayTypeEnum gatewayType = 4;
 * @return {!proto.xyz.redtorch.pb.GatewayTypeEnum}
 */
proto.xyz.redtorch.pb.GatewayField.prototype.getGatewaytype = function() {
  return /** @type {!proto.xyz.redtorch.pb.GatewayTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.xyz.redtorch.pb.GatewayTypeEnum} value */
proto.xyz.redtorch.pb.GatewayField.prototype.setGatewaytype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional GatewayAdapterTypeEnum gatewayAdapterType = 5;
 * @return {!proto.xyz.redtorch.pb.GatewayAdapterTypeEnum}
 */
proto.xyz.redtorch.pb.GatewayField.prototype.getGatewayadaptertype = function() {
  return /** @type {!proto.xyz.redtorch.pb.GatewayAdapterTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.xyz.redtorch.pb.GatewayAdapterTypeEnum} value */
proto.xyz.redtorch.pb.GatewayField.prototype.setGatewayadaptertype = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional ConnectStatusEnum status = 6;
 * @return {!proto.xyz.redtorch.pb.ConnectStatusEnum}
 */
proto.xyz.redtorch.pb.GatewayField.prototype.getStatus = function() {
  return /** @type {!proto.xyz.redtorch.pb.ConnectStatusEnum} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.xyz.redtorch.pb.ConnectStatusEnum} value */
proto.xyz.redtorch.pb.GatewayField.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bool authErrorFlag = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xyz.redtorch.pb.GatewayField.prototype.getAutherrorflag = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.xyz.redtorch.pb.GatewayField.prototype.setAutherrorflag = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.ContractField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.ContractField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.ContractField.displayName = 'proto.xyz.redtorch.pb.ContractField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.ContractField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.ContractField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.ContractField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.ContractField.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fullname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    thirdpartyid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    unifiedsymbol: jspb.Message.getFieldWithDefault(msg, 7, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 8, ""),
    exchange: jspb.Message.getFieldWithDefault(msg, 9, 0),
    productclass: jspb.Message.getFieldWithDefault(msg, 10, 0),
    currency: jspb.Message.getFieldWithDefault(msg, 11, 0),
    multiplier: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    pricetick: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    longmarginratio: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    shortmarginratio: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    maxmarginsidealgorithm: jspb.Message.getFieldWithDefault(msg, 16, false),
    underlyingsymbol: jspb.Message.getFieldWithDefault(msg, 17, ""),
    strikeprice: +jspb.Message.getFieldWithDefault(msg, 18, 0.0),
    optionstype: jspb.Message.getFieldWithDefault(msg, 19, 0),
    underlyingmultiplier: +jspb.Message.getFieldWithDefault(msg, 20, 0.0),
    lasttradedateorcontractmonth: jspb.Message.getFieldWithDefault(msg, 21, ""),
    maxmarketordervolume: jspb.Message.getFieldWithDefault(msg, 22, 0),
    minmarketordervolume: jspb.Message.getFieldWithDefault(msg, 23, 0),
    maxlimitordervolume: jspb.Message.getFieldWithDefault(msg, 24, 0),
    minlimitordervolume: jspb.Message.getFieldWithDefault(msg, 25, 0),
    combinationtype: jspb.Message.getFieldWithDefault(msg, 26, 0),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 27, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.ContractField}
 */
proto.xyz.redtorch.pb.ContractField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.ContractField;
  return proto.xyz.redtorch.pb.ContractField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.ContractField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.ContractField}
 */
proto.xyz.redtorch.pb.ContractField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setThirdpartyid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnifiedsymbol(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 9:
      var value = /** @type {!proto.xyz.redtorch.pb.ExchangeEnum} */ (reader.readEnum());
      msg.setExchange(value);
      break;
    case 10:
      var value = /** @type {!proto.xyz.redtorch.pb.ProductClassEnum} */ (reader.readEnum());
      msg.setProductclass(value);
      break;
    case 11:
      var value = /** @type {!proto.xyz.redtorch.pb.CurrencyEnum} */ (reader.readEnum());
      msg.setCurrency(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMultiplier(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPricetick(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongmarginratio(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setShortmarginratio(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMaxmarginsidealgorithm(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnderlyingsymbol(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStrikeprice(value);
      break;
    case 19:
      var value = /** @type {!proto.xyz.redtorch.pb.OptionsTypeEnum} */ (reader.readEnum());
      msg.setOptionstype(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUnderlyingmultiplier(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setLasttradedateorcontractmonth(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMaxmarketordervolume(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMinmarketordervolume(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMaxlimitordervolume(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMinlimitordervolume(value);
      break;
    case 26:
      var value = /** @type {!proto.xyz.redtorch.pb.CombinationTypeEnum} */ (reader.readEnum());
      msg.setCombinationtype(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.ContractField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.ContractField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.ContractField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.ContractField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFullname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getThirdpartyid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUnifiedsymbol();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getExchange();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getProductclass();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getCurrency();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getMultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getPricetick();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getLongmarginratio();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getShortmarginratio();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getMaxmarginsidealgorithm();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getUnderlyingsymbol();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getStrikeprice();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getOptionstype();
  if (f !== 0.0) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = message.getUnderlyingmultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getLasttradedateorcontractmonth();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getMaxmarketordervolume();
  if (f !== 0) {
    writer.writeFixed32(
      22,
      f
    );
  }
  f = message.getMinmarketordervolume();
  if (f !== 0) {
    writer.writeFixed32(
      23,
      f
    );
  }
  f = message.getMaxlimitordervolume();
  if (f !== 0) {
    writer.writeFixed32(
      24,
      f
    );
  }
  f = message.getMinlimitordervolume();
  if (f !== 0) {
    writer.writeFixed32(
      25,
      f
    );
  }
  f = message.getCombinationtype();
  if (f !== 0.0) {
    writer.writeEnum(
      26,
      f
    );
  }
  f = message.getGatewayid();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
};


/**
 * optional string contractId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getContractid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.ContractField.prototype.setContractid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.ContractField.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fullName = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getFullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.ContractField.prototype.setFullname = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string thirdPartyId = 4;
 * @return {string}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getThirdpartyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.ContractField.prototype.setThirdpartyid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string unifiedSymbol = 7;
 * @return {string}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getUnifiedsymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.ContractField.prototype.setUnifiedsymbol = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string symbol = 8;
 * @return {string}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.ContractField.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional ExchangeEnum exchange = 9;
 * @return {!proto.xyz.redtorch.pb.ExchangeEnum}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getExchange = function() {
  return /** @type {!proto.xyz.redtorch.pb.ExchangeEnum} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.xyz.redtorch.pb.ExchangeEnum} value */
proto.xyz.redtorch.pb.ContractField.prototype.setExchange = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional ProductClassEnum productClass = 10;
 * @return {!proto.xyz.redtorch.pb.ProductClassEnum}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getProductclass = function() {
  return /** @type {!proto.xyz.redtorch.pb.ProductClassEnum} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.xyz.redtorch.pb.ProductClassEnum} value */
proto.xyz.redtorch.pb.ContractField.prototype.setProductclass = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional CurrencyEnum currency = 11;
 * @return {!proto.xyz.redtorch.pb.CurrencyEnum}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getCurrency = function() {
  return /** @type {!proto.xyz.redtorch.pb.CurrencyEnum} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.xyz.redtorch.pb.CurrencyEnum} value */
proto.xyz.redtorch.pb.ContractField.prototype.setCurrency = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional double multiplier = 12;
 * @return {number}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getMultiplier = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.ContractField.prototype.setMultiplier = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double priceTick = 13;
 * @return {number}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getPricetick = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.ContractField.prototype.setPricetick = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double longMarginRatio = 14;
 * @return {number}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getLongmarginratio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.ContractField.prototype.setLongmarginratio = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double shortMarginRatio = 15;
 * @return {number}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getShortmarginratio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.ContractField.prototype.setShortmarginratio = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional bool maxMarginSideAlgorithm = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getMaxmarginsidealgorithm = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 16, false));
};


/** @param {boolean} value */
proto.xyz.redtorch.pb.ContractField.prototype.setMaxmarginsidealgorithm = function(value) {
  jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional string underlyingSymbol = 17;
 * @return {string}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getUnderlyingsymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.ContractField.prototype.setUnderlyingsymbol = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional double strikePrice = 18;
 * @return {number}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getStrikeprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.ContractField.prototype.setStrikeprice = function(value) {
  jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional OptionsTypeEnum optionsType = 19;
 * @return {!proto.xyz.redtorch.pb.OptionsTypeEnum}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getOptionstype = function() {
  return /** @type {!proto.xyz.redtorch.pb.OptionsTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {!proto.xyz.redtorch.pb.OptionsTypeEnum} value */
proto.xyz.redtorch.pb.ContractField.prototype.setOptionstype = function(value) {
  jspb.Message.setProto3EnumField(this, 19, value);
};


/**
 * optional double underlyingMultiplier = 20;
 * @return {number}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getUnderlyingmultiplier = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 20, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.ContractField.prototype.setUnderlyingmultiplier = function(value) {
  jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional string lastTradeDateOrContractMonth = 21;
 * @return {string}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getLasttradedateorcontractmonth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.ContractField.prototype.setLasttradedateorcontractmonth = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional fixed32 maxMarketOrderVolume = 22;
 * @return {number}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getMaxmarketordervolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.ContractField.prototype.setMaxmarketordervolume = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional fixed32 minMarketOrderVolume = 23;
 * @return {number}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getMinmarketordervolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.ContractField.prototype.setMinmarketordervolume = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional fixed32 maxLimitOrderVolume = 24;
 * @return {number}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getMaxlimitordervolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.ContractField.prototype.setMaxlimitordervolume = function(value) {
  jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional fixed32 minLimitOrderVolume = 25;
 * @return {number}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getMinlimitordervolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.ContractField.prototype.setMinlimitordervolume = function(value) {
  jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional CombinationTypeEnum combinationType = 26;
 * @return {!proto.xyz.redtorch.pb.CombinationTypeEnum}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getCombinationtype = function() {
  return /** @type {!proto.xyz.redtorch.pb.CombinationTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {!proto.xyz.redtorch.pb.CombinationTypeEnum} value */
proto.xyz.redtorch.pb.ContractField.prototype.setCombinationtype = function(value) {
  jspb.Message.setProto3EnumField(this, 26, value);
};


/**
 * optional string gatewayId = 27;
 * @return {string}
 */
proto.xyz.redtorch.pb.ContractField.prototype.getGatewayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.ContractField.prototype.setGatewayid = function(value) {
  jspb.Message.setProto3StringField(this, 27, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.AccountField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.AccountField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.AccountField.displayName = 'proto.xyz.redtorch.pb.AccountField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.AccountField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.AccountField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.AccountField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.AccountField.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    holder: jspb.Message.getFieldWithDefault(msg, 4, ""),
    currency: jspb.Message.getFieldWithDefault(msg, 5, 0),
    prebalance: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    balance: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    available: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    commission: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    margin: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    closeprofit: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    positionprofit: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    deposit: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    withdraw: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.AccountField}
 */
proto.xyz.redtorch.pb.AccountField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.AccountField;
  return proto.xyz.redtorch.pb.AccountField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.AccountField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.AccountField}
 */
proto.xyz.redtorch.pb.AccountField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHolder(value);
      break;
    case 5:
      var value = /** @type {!proto.xyz.redtorch.pb.CurrencyEnum} */ (reader.readEnum());
      msg.setCurrency(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrebalance(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBalance(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAvailable(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCommission(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMargin(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCloseprofit(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionprofit(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeposit(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWithdraw(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.AccountField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.AccountField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.AccountField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.AccountField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHolder();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCurrency();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getPrebalance();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getAvailable();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getCommission();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getMargin();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getCloseprofit();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getPositionprofit();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getDeposit();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getWithdraw();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getGatewayid();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string accountId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getAccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.AccountField.prototype.setAccountid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.AccountField.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.AccountField.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string holder = 4;
 * @return {string}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getHolder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.AccountField.prototype.setHolder = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional CurrencyEnum currency = 5;
 * @return {!proto.xyz.redtorch.pb.CurrencyEnum}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getCurrency = function() {
  return /** @type {!proto.xyz.redtorch.pb.CurrencyEnum} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.xyz.redtorch.pb.CurrencyEnum} value */
proto.xyz.redtorch.pb.AccountField.prototype.setCurrency = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional double preBalance = 6;
 * @return {number}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getPrebalance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.AccountField.prototype.setPrebalance = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double balance = 7;
 * @return {number}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getBalance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.AccountField.prototype.setBalance = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double available = 8;
 * @return {number}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getAvailable = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.AccountField.prototype.setAvailable = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double commission = 9;
 * @return {number}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getCommission = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.AccountField.prototype.setCommission = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double margin = 10;
 * @return {number}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getMargin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.AccountField.prototype.setMargin = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double closeProfit = 11;
 * @return {number}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getCloseprofit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.AccountField.prototype.setCloseprofit = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double positionProfit = 12;
 * @return {number}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getPositionprofit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.AccountField.prototype.setPositionprofit = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double deposit = 13;
 * @return {number}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getDeposit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.AccountField.prototype.setDeposit = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double withdraw = 14;
 * @return {number}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getWithdraw = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.AccountField.prototype.setWithdraw = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional string gatewayId = 15;
 * @return {string}
 */
proto.xyz.redtorch.pb.AccountField.prototype.getGatewayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.AccountField.prototype.setGatewayid = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.OrderField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.OrderField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.OrderField.displayName = 'proto.xyz.redtorch.pb.OrderField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.OrderField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.OrderField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.OrderField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.OrderField.toObject = function(includeInstance, msg) {
  var f, obj = {
    originorderid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orderid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    adapterorderid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    accountid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    orderlocalid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    brokerorderseq: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ordersysid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    sequenceno: jspb.Message.getFieldWithDefault(msg, 8, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 9, 0),
    offsetflag: jspb.Message.getFieldWithDefault(msg, 10, 0),
    hedgeflag: jspb.Message.getFieldWithDefault(msg, 11, 0),
    orderpricetype: jspb.Message.getFieldWithDefault(msg, 12, 0),
    orderstatus: jspb.Message.getFieldWithDefault(msg, 13, 0),
    price: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    totalvolume: jspb.Message.getFieldWithDefault(msg, 15, 0),
    tradedvolume: jspb.Message.getFieldWithDefault(msg, 16, 0),
    timecondition: jspb.Message.getFieldWithDefault(msg, 17, 0),
    gtddate: jspb.Message.getFieldWithDefault(msg, 18, ""),
    volumecondition: jspb.Message.getFieldWithDefault(msg, 19, 0),
    minvolume: jspb.Message.getFieldWithDefault(msg, 20, 0),
    contingentcondition: jspb.Message.getFieldWithDefault(msg, 21, 0),
    stopprice: +jspb.Message.getFieldWithDefault(msg, 22, 0.0),
    forceclosereason: jspb.Message.getFieldWithDefault(msg, 23, 0),
    autosuspend: jspb.Message.getFieldWithDefault(msg, 24, 0),
    userforceclose: jspb.Message.getFieldWithDefault(msg, 25, 0),
    swaporder: jspb.Message.getFieldWithDefault(msg, 26, 0),
    tradingday: jspb.Message.getFieldWithDefault(msg, 27, ""),
    orderdate: jspb.Message.getFieldWithDefault(msg, 28, ""),
    ordertime: jspb.Message.getFieldWithDefault(msg, 29, ""),
    activetime: jspb.Message.getFieldWithDefault(msg, 30, ""),
    suspendtime: jspb.Message.getFieldWithDefault(msg, 31, ""),
    canceltime: jspb.Message.getFieldWithDefault(msg, 32, ""),
    updatetime: jspb.Message.getFieldWithDefault(msg, 33, ""),
    statusmsg: jspb.Message.getFieldWithDefault(msg, 34, ""),
    frontid: jspb.Message.getFieldWithDefault(msg, 35, 0),
    sessionid: jspb.Message.getFieldWithDefault(msg, 36, 0),
    contract: (f = msg.getContract()) && proto.xyz.redtorch.pb.ContractField.toObject(includeInstance, f),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 38, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.OrderField}
 */
proto.xyz.redtorch.pb.OrderField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.OrderField;
  return proto.xyz.redtorch.pb.OrderField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.OrderField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.OrderField}
 */
proto.xyz.redtorch.pb.OrderField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginorderid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdapterorderid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderlocalid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrokerorderseq(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrdersysid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSequenceno(value);
      break;
    case 9:
      var value = /** @type {!proto.xyz.redtorch.pb.DirectionEnum} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 10:
      var value = /** @type {!proto.xyz.redtorch.pb.OffsetFlagEnum} */ (reader.readEnum());
      msg.setOffsetflag(value);
      break;
    case 11:
      var value = /** @type {!proto.xyz.redtorch.pb.HedgeFlagEnum} */ (reader.readEnum());
      msg.setHedgeflag(value);
      break;
    case 12:
      var value = /** @type {!proto.xyz.redtorch.pb.OrderPriceTypeEnum} */ (reader.readEnum());
      msg.setOrderpricetype(value);
      break;
    case 13:
      var value = /** @type {!proto.xyz.redtorch.pb.OrderStatusEnum} */ (reader.readEnum());
      msg.setOrderstatus(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTotalvolume(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTradedvolume(value);
      break;
    case 17:
      var value = /** @type {!proto.xyz.redtorch.pb.TimeConditionEnum} */ (reader.readEnum());
      msg.setTimecondition(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtddate(value);
      break;
    case 19:
      var value = /** @type {!proto.xyz.redtorch.pb.VolumeConditionEnum} */ (reader.readEnum());
      msg.setVolumecondition(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMinvolume(value);
      break;
    case 21:
      var value = /** @type {!proto.xyz.redtorch.pb.ContingentConditionEnum} */ (reader.readEnum());
      msg.setContingentcondition(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopprice(value);
      break;
    case 23:
      var value = /** @type {!proto.xyz.redtorch.pb.ForceCloseReasonEnum} */ (reader.readEnum());
      msg.setForceclosereason(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAutosuspend(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setUserforceclose(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSwaporder(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradingday(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderdate(value);
      break;
    case 29:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrdertime(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivetime(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setSuspendtime(value);
      break;
    case 32:
      var value = /** @type {string} */ (reader.readString());
      msg.setCanceltime(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdatetime(value);
      break;
    case 34:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusmsg(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFrontid(value);
      break;
    case 36:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSessionid(value);
      break;
    case 37:
      var value = new proto.xyz.redtorch.pb.ContractField;
      reader.readMessage(value,proto.xyz.redtorch.pb.ContractField.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 38:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.OrderField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.OrderField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.OrderField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.OrderField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOriginorderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAdapterorderid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAccountid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOrderlocalid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBrokerorderseq();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getOrdersysid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSequenceno();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getOffsetflag();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getHedgeflag();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getOrderpricetype();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getOrderstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getTotalvolume();
  if (f !== 0) {
    writer.writeFixed32(
      15,
      f
    );
  }
  f = message.getTradedvolume();
  if (f !== 0) {
    writer.writeFixed32(
      16,
      f
    );
  }
  f = message.getTimecondition();
  if (f !== 0.0) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = message.getGtddate();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getVolumecondition();
  if (f !== 0.0) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = message.getMinvolume();
  if (f !== 0) {
    writer.writeFixed32(
      20,
      f
    );
  }
  f = message.getContingentcondition();
  if (f !== 0.0) {
    writer.writeEnum(
      21,
      f
    );
  }
  f = message.getStopprice();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getForceclosereason();
  if (f !== 0.0) {
    writer.writeEnum(
      23,
      f
    );
  }
  f = message.getAutosuspend();
  if (f !== 0) {
    writer.writeFixed32(
      24,
      f
    );
  }
  f = message.getUserforceclose();
  if (f !== 0) {
    writer.writeFixed32(
      25,
      f
    );
  }
  f = message.getSwaporder();
  if (f !== 0) {
    writer.writeFixed32(
      26,
      f
    );
  }
  f = message.getTradingday();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getOrderdate();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
  f = message.getOrdertime();
  if (f.length > 0) {
    writer.writeString(
      29,
      f
    );
  }
  f = message.getActivetime();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getSuspendtime();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
  f = message.getCanceltime();
  if (f.length > 0) {
    writer.writeString(
      32,
      f
    );
  }
  f = message.getUpdatetime();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = message.getStatusmsg();
  if (f.length > 0) {
    writer.writeString(
      34,
      f
    );
  }
  f = message.getFrontid();
  if (f !== 0) {
    writer.writeFixed32(
      35,
      f
    );
  }
  f = message.getSessionid();
  if (f !== 0) {
    writer.writeFixed32(
      36,
      f
    );
  }
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.xyz.redtorch.pb.ContractField.serializeBinaryToWriter
    );
  }
  f = message.getGatewayid();
  if (f.length > 0) {
    writer.writeString(
      38,
      f
    );
  }
};


/**
 * optional string originOrderId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getOriginorderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setOriginorderid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string orderId = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setOrderid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string adapterOrderId = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getAdapterorderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setAdapterorderid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string accountId = 4;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getAccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setAccountid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string orderLocalId = 5;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getOrderlocalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setOrderlocalid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string brokerOrderSeq = 6;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getBrokerorderseq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setBrokerorderseq = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string orderSysId = 7;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getOrdersysid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setOrdersysid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string sequenceNo = 8;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getSequenceno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setSequenceno = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional DirectionEnum direction = 9;
 * @return {!proto.xyz.redtorch.pb.DirectionEnum}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getDirection = function() {
  return /** @type {!proto.xyz.redtorch.pb.DirectionEnum} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.xyz.redtorch.pb.DirectionEnum} value */
proto.xyz.redtorch.pb.OrderField.prototype.setDirection = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional OffsetFlagEnum offsetFlag = 10;
 * @return {!proto.xyz.redtorch.pb.OffsetFlagEnum}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getOffsetflag = function() {
  return /** @type {!proto.xyz.redtorch.pb.OffsetFlagEnum} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.xyz.redtorch.pb.OffsetFlagEnum} value */
proto.xyz.redtorch.pb.OrderField.prototype.setOffsetflag = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional HedgeFlagEnum hedgeFlag = 11;
 * @return {!proto.xyz.redtorch.pb.HedgeFlagEnum}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getHedgeflag = function() {
  return /** @type {!proto.xyz.redtorch.pb.HedgeFlagEnum} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.xyz.redtorch.pb.HedgeFlagEnum} value */
proto.xyz.redtorch.pb.OrderField.prototype.setHedgeflag = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional OrderPriceTypeEnum orderPriceType = 12;
 * @return {!proto.xyz.redtorch.pb.OrderPriceTypeEnum}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getOrderpricetype = function() {
  return /** @type {!proto.xyz.redtorch.pb.OrderPriceTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.xyz.redtorch.pb.OrderPriceTypeEnum} value */
proto.xyz.redtorch.pb.OrderField.prototype.setOrderpricetype = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional OrderStatusEnum orderStatus = 13;
 * @return {!proto.xyz.redtorch.pb.OrderStatusEnum}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getOrderstatus = function() {
  return /** @type {!proto.xyz.redtorch.pb.OrderStatusEnum} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.xyz.redtorch.pb.OrderStatusEnum} value */
proto.xyz.redtorch.pb.OrderField.prototype.setOrderstatus = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional double price = 14;
 * @return {number}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.OrderField.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional fixed32 totalVolume = 15;
 * @return {number}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getTotalvolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.OrderField.prototype.setTotalvolume = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional fixed32 tradedVolume = 16;
 * @return {number}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getTradedvolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.OrderField.prototype.setTradedvolume = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional TimeConditionEnum timeCondition = 17;
 * @return {!proto.xyz.redtorch.pb.TimeConditionEnum}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getTimecondition = function() {
  return /** @type {!proto.xyz.redtorch.pb.TimeConditionEnum} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {!proto.xyz.redtorch.pb.TimeConditionEnum} value */
proto.xyz.redtorch.pb.OrderField.prototype.setTimecondition = function(value) {
  jspb.Message.setProto3EnumField(this, 17, value);
};


/**
 * optional string gtdDate = 18;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getGtddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setGtddate = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional VolumeConditionEnum volumeCondition = 19;
 * @return {!proto.xyz.redtorch.pb.VolumeConditionEnum}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getVolumecondition = function() {
  return /** @type {!proto.xyz.redtorch.pb.VolumeConditionEnum} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {!proto.xyz.redtorch.pb.VolumeConditionEnum} value */
proto.xyz.redtorch.pb.OrderField.prototype.setVolumecondition = function(value) {
  jspb.Message.setProto3EnumField(this, 19, value);
};


/**
 * optional fixed32 minVolume = 20;
 * @return {number}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getMinvolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.OrderField.prototype.setMinvolume = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional ContingentConditionEnum contingentCondition = 21;
 * @return {!proto.xyz.redtorch.pb.ContingentConditionEnum}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getContingentcondition = function() {
  return /** @type {!proto.xyz.redtorch.pb.ContingentConditionEnum} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {!proto.xyz.redtorch.pb.ContingentConditionEnum} value */
proto.xyz.redtorch.pb.OrderField.prototype.setContingentcondition = function(value) {
  jspb.Message.setProto3EnumField(this, 21, value);
};


/**
 * optional double stopPrice = 22;
 * @return {number}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getStopprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 22, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.OrderField.prototype.setStopprice = function(value) {
  jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional ForceCloseReasonEnum forceCloseReason = 23;
 * @return {!proto.xyz.redtorch.pb.ForceCloseReasonEnum}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getForceclosereason = function() {
  return /** @type {!proto.xyz.redtorch.pb.ForceCloseReasonEnum} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {!proto.xyz.redtorch.pb.ForceCloseReasonEnum} value */
proto.xyz.redtorch.pb.OrderField.prototype.setForceclosereason = function(value) {
  jspb.Message.setProto3EnumField(this, 23, value);
};


/**
 * optional fixed32 autoSuspend = 24;
 * @return {number}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getAutosuspend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.OrderField.prototype.setAutosuspend = function(value) {
  jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional fixed32 userForceClose = 25;
 * @return {number}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getUserforceclose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.OrderField.prototype.setUserforceclose = function(value) {
  jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional fixed32 swapOrder = 26;
 * @return {number}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getSwaporder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.OrderField.prototype.setSwaporder = function(value) {
  jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional string tradingDay = 27;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getTradingday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setTradingday = function(value) {
  jspb.Message.setProto3StringField(this, 27, value);
};


/**
 * optional string orderDate = 28;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getOrderdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setOrderdate = function(value) {
  jspb.Message.setProto3StringField(this, 28, value);
};


/**
 * optional string orderTime = 29;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getOrdertime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 29, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setOrdertime = function(value) {
  jspb.Message.setProto3StringField(this, 29, value);
};


/**
 * optional string activeTime = 30;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getActivetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setActivetime = function(value) {
  jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional string suspendTime = 31;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getSuspendtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setSuspendtime = function(value) {
  jspb.Message.setProto3StringField(this, 31, value);
};


/**
 * optional string cancelTime = 32;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getCanceltime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setCanceltime = function(value) {
  jspb.Message.setProto3StringField(this, 32, value);
};


/**
 * optional string updateTime = 33;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getUpdatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setUpdatetime = function(value) {
  jspb.Message.setProto3StringField(this, 33, value);
};


/**
 * optional string statusMsg = 34;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getStatusmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 34, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setStatusmsg = function(value) {
  jspb.Message.setProto3StringField(this, 34, value);
};


/**
 * optional fixed32 frontId = 35;
 * @return {number}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getFrontid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.OrderField.prototype.setFrontid = function(value) {
  jspb.Message.setProto3IntField(this, 35, value);
};


/**
 * optional fixed32 sessionId = 36;
 * @return {number}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getSessionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 36, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.OrderField.prototype.setSessionid = function(value) {
  jspb.Message.setProto3IntField(this, 36, value);
};


/**
 * optional ContractField contract = 37;
 * @return {?proto.xyz.redtorch.pb.ContractField}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getContract = function() {
  return /** @type{?proto.xyz.redtorch.pb.ContractField} */ (
    jspb.Message.getWrapperField(this, proto.xyz.redtorch.pb.ContractField, 37));
};


/** @param {?proto.xyz.redtorch.pb.ContractField|undefined} value */
proto.xyz.redtorch.pb.OrderField.prototype.setContract = function(value) {
  jspb.Message.setWrapperField(this, 37, value);
};


proto.xyz.redtorch.pb.OrderField.prototype.clearContract = function() {
  this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xyz.redtorch.pb.OrderField.prototype.hasContract = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional string gatewayId = 38;
 * @return {string}
 */
proto.xyz.redtorch.pb.OrderField.prototype.getGatewayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 38, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.OrderField.prototype.setGatewayid = function(value) {
  jspb.Message.setProto3StringField(this, 38, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.TradeField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.TradeField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.TradeField.displayName = 'proto.xyz.redtorch.pb.TradeField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.TradeField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.TradeField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.TradeField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.TradeField.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradeid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    adaptertradeid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    originorderid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orderid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    adapterorderid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    orderlocalid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    brokerorderseq: jspb.Message.getFieldWithDefault(msg, 7, ""),
    ordersysid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    settlementid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    sequenceno: jspb.Message.getFieldWithDefault(msg, 10, ""),
    accountid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 12, 0),
    offsetflag: jspb.Message.getFieldWithDefault(msg, 13, 0),
    hedgeflag: jspb.Message.getFieldWithDefault(msg, 14, 0),
    price: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    volume: jspb.Message.getFieldWithDefault(msg, 16, 0),
    tradetype: jspb.Message.getFieldWithDefault(msg, 17, 0),
    pricesource: jspb.Message.getFieldWithDefault(msg, 18, 0),
    tradingday: jspb.Message.getFieldWithDefault(msg, 19, ""),
    tradedate: jspb.Message.getFieldWithDefault(msg, 20, ""),
    tradetime: jspb.Message.getFieldWithDefault(msg, 21, ""),
    tradetimestamp: jspb.Message.getFieldWithDefault(msg, 22, 0),
    contract: (f = msg.getContract()) && proto.xyz.redtorch.pb.ContractField.toObject(includeInstance, f),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 24, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.TradeField}
 */
proto.xyz.redtorch.pb.TradeField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.TradeField;
  return proto.xyz.redtorch.pb.TradeField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.TradeField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.TradeField}
 */
proto.xyz.redtorch.pb.TradeField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdaptertradeid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginorderid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdapterorderid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderlocalid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrokerorderseq(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrdersysid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlementid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSequenceno(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountid(value);
      break;
    case 12:
      var value = /** @type {!proto.xyz.redtorch.pb.DirectionEnum} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 13:
      var value = /** @type {!proto.xyz.redtorch.pb.OffsetFlagEnum} */ (reader.readEnum());
      msg.setOffsetflag(value);
      break;
    case 14:
      var value = /** @type {!proto.xyz.redtorch.pb.HedgeFlagEnum} */ (reader.readEnum());
      msg.setHedgeflag(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setVolume(value);
      break;
    case 17:
      var value = /** @type {!proto.xyz.redtorch.pb.TradeTypeEnum} */ (reader.readEnum());
      msg.setTradetype(value);
      break;
    case 18:
      var value = /** @type {!proto.xyz.redtorch.pb.PriceSourceEnum} */ (reader.readEnum());
      msg.setPricesource(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradingday(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradedate(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradetime(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTradetimestamp(value);
      break;
    case 23:
      var value = new proto.xyz.redtorch.pb.ContractField;
      reader.readMessage(value,proto.xyz.redtorch.pb.ContractField.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.TradeField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.TradeField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.TradeField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.TradeField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradeid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAdaptertradeid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOriginorderid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAdapterorderid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOrderlocalid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBrokerorderseq();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOrdersysid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSettlementid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSequenceno();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getAccountid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getOffsetflag();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getHedgeflag();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeFixed32(
      16,
      f
    );
  }
  f = message.getTradetype();
  if (f !== 0.0) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = message.getPricesource();
  if (f !== 0.0) {
    writer.writeEnum(
      18,
      f
    );
  }
  f = message.getTradingday();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getTradedate();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getTradetime();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getTradetimestamp();
  if (f !== 0) {
    writer.writeFixed64(
      22,
      f
    );
  }
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.xyz.redtorch.pb.ContractField.serializeBinaryToWriter
    );
  }
  f = message.getGatewayid();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
};


/**
 * optional string tradeId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getTradeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setTradeid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string adapterTradeId = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getAdaptertradeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setAdaptertradeid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string originOrderId = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getOriginorderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setOriginorderid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string orderId = 4;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setOrderid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string adapterOrderId = 5;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getAdapterorderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setAdapterorderid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string orderLocalId = 6;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getOrderlocalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setOrderlocalid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string brokerOrderSeq = 7;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getBrokerorderseq = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setBrokerorderseq = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string orderSysId = 8;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getOrdersysid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setOrdersysid = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string settlementId = 9;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getSettlementid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setSettlementid = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string sequenceNo = 10;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getSequenceno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setSequenceno = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string accountId = 11;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getAccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setAccountid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional DirectionEnum direction = 12;
 * @return {!proto.xyz.redtorch.pb.DirectionEnum}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getDirection = function() {
  return /** @type {!proto.xyz.redtorch.pb.DirectionEnum} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.xyz.redtorch.pb.DirectionEnum} value */
proto.xyz.redtorch.pb.TradeField.prototype.setDirection = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional OffsetFlagEnum offsetFlag = 13;
 * @return {!proto.xyz.redtorch.pb.OffsetFlagEnum}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getOffsetflag = function() {
  return /** @type {!proto.xyz.redtorch.pb.OffsetFlagEnum} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.xyz.redtorch.pb.OffsetFlagEnum} value */
proto.xyz.redtorch.pb.TradeField.prototype.setOffsetflag = function(value) {
  jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional HedgeFlagEnum hedgeFlag = 14;
 * @return {!proto.xyz.redtorch.pb.HedgeFlagEnum}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getHedgeflag = function() {
  return /** @type {!proto.xyz.redtorch.pb.HedgeFlagEnum} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.xyz.redtorch.pb.HedgeFlagEnum} value */
proto.xyz.redtorch.pb.TradeField.prototype.setHedgeflag = function(value) {
  jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional double price = 15;
 * @return {number}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TradeField.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional fixed32 volume = 16;
 * @return {number}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TradeField.prototype.setVolume = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional TradeTypeEnum tradeType = 17;
 * @return {!proto.xyz.redtorch.pb.TradeTypeEnum}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getTradetype = function() {
  return /** @type {!proto.xyz.redtorch.pb.TradeTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {!proto.xyz.redtorch.pb.TradeTypeEnum} value */
proto.xyz.redtorch.pb.TradeField.prototype.setTradetype = function(value) {
  jspb.Message.setProto3EnumField(this, 17, value);
};


/**
 * optional PriceSourceEnum priceSource = 18;
 * @return {!proto.xyz.redtorch.pb.PriceSourceEnum}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getPricesource = function() {
  return /** @type {!proto.xyz.redtorch.pb.PriceSourceEnum} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {!proto.xyz.redtorch.pb.PriceSourceEnum} value */
proto.xyz.redtorch.pb.TradeField.prototype.setPricesource = function(value) {
  jspb.Message.setProto3EnumField(this, 18, value);
};


/**
 * optional string tradingDay = 19;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getTradingday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setTradingday = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string tradeDate = 20;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getTradedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setTradedate = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string tradeTime = 21;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getTradetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setTradetime = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional fixed64 tradeTimestamp = 22;
 * @return {number}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getTradetimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TradeField.prototype.setTradetimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional ContractField contract = 23;
 * @return {?proto.xyz.redtorch.pb.ContractField}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getContract = function() {
  return /** @type{?proto.xyz.redtorch.pb.ContractField} */ (
    jspb.Message.getWrapperField(this, proto.xyz.redtorch.pb.ContractField, 23));
};


/** @param {?proto.xyz.redtorch.pb.ContractField|undefined} value */
proto.xyz.redtorch.pb.TradeField.prototype.setContract = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.xyz.redtorch.pb.TradeField.prototype.clearContract = function() {
  this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xyz.redtorch.pb.TradeField.prototype.hasContract = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional string gatewayId = 24;
 * @return {string}
 */
proto.xyz.redtorch.pb.TradeField.prototype.getGatewayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TradeField.prototype.setGatewayid = function(value) {
  jspb.Message.setProto3StringField(this, 24, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.PositionField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.PositionField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.PositionField.displayName = 'proto.xyz.redtorch.pb.PositionField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.PositionField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.PositionField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.PositionField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.PositionField.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    positiondirection: jspb.Message.getFieldWithDefault(msg, 3, 0),
    position: jspb.Message.getFieldWithDefault(msg, 4, 0),
    frozen: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ydposition: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ydfrozen: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tdposition: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tdfrozen: jspb.Message.getFieldWithDefault(msg, 9, 0),
    lastprice: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    price: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    pricediff: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    openprice: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    openpricediff: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    positionprofit: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    positionprofitratio: +jspb.Message.getFieldWithDefault(msg, 16, 0.0),
    openpositionprofit: +jspb.Message.getFieldWithDefault(msg, 17, 0.0),
    openpositionprofitratio: +jspb.Message.getFieldWithDefault(msg, 18, 0.0),
    usemargin: +jspb.Message.getFieldWithDefault(msg, 19, 0.0),
    exchangemargin: +jspb.Message.getFieldWithDefault(msg, 20, 0.0),
    contractvalue: +jspb.Message.getFieldWithDefault(msg, 21, 0.0),
    hedgeflag: jspb.Message.getFieldWithDefault(msg, 22, 0),
    contract: (f = msg.getContract()) && proto.xyz.redtorch.pb.ContractField.toObject(includeInstance, f),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 24, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.PositionField}
 */
proto.xyz.redtorch.pb.PositionField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.PositionField;
  return proto.xyz.redtorch.pb.PositionField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.PositionField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.PositionField}
 */
proto.xyz.redtorch.pb.PositionField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPositionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountid(value);
      break;
    case 3:
      var value = /** @type {!proto.xyz.redtorch.pb.PositionDirectionEnum} */ (reader.readEnum());
      msg.setPositiondirection(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPosition(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFrozen(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setYdposition(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setYdfrozen(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTdposition(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTdfrozen(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLastprice(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPricediff(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpenprice(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpenpricediff(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionprofit(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionprofitratio(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpenpositionprofit(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpenpositionprofitratio(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUsemargin(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExchangemargin(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setContractvalue(value);
      break;
    case 22:
      var value = /** @type {!proto.xyz.redtorch.pb.HedgeFlagEnum} */ (reader.readEnum());
      msg.setHedgeflag(value);
      break;
    case 23:
      var value = new proto.xyz.redtorch.pb.ContractField;
      reader.readMessage(value,proto.xyz.redtorch.pb.ContractField.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.PositionField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.PositionField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.PositionField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.PositionField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPositiondirection();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getFrozen();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getYdposition();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getYdfrozen();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getTdposition();
  if (f !== 0) {
    writer.writeFixed32(
      8,
      f
    );
  }
  f = message.getTdfrozen();
  if (f !== 0) {
    writer.writeFixed32(
      9,
      f
    );
  }
  f = message.getLastprice();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getPricediff();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getOpenprice();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getOpenpricediff();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getPositionprofit();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getPositionprofitratio();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getOpenpositionprofit();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getOpenpositionprofitratio();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getUsemargin();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getExchangemargin();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getContractvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getHedgeflag();
  if (f !== 0.0) {
    writer.writeEnum(
      22,
      f
    );
  }
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.xyz.redtorch.pb.ContractField.serializeBinaryToWriter
    );
  }
  f = message.getGatewayid();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
};


/**
 * optional string positionId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getPositionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.PositionField.prototype.setPositionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accountId = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getAccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.PositionField.prototype.setAccountid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PositionDirectionEnum positionDirection = 3;
 * @return {!proto.xyz.redtorch.pb.PositionDirectionEnum}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getPositiondirection = function() {
  return /** @type {!proto.xyz.redtorch.pb.PositionDirectionEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.xyz.redtorch.pb.PositionDirectionEnum} value */
proto.xyz.redtorch.pb.PositionField.prototype.setPositiondirection = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional fixed32 position = 4;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setPosition = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed32 frozen = 5;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getFrozen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setFrozen = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional fixed32 ydPosition = 6;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getYdposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setYdposition = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 ydFrozen = 7;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getYdfrozen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setYdfrozen = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional fixed32 tdPosition = 8;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getTdposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setTdposition = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional fixed32 tdFrozen = 9;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getTdfrozen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setTdfrozen = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional double lastPrice = 10;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getLastprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setLastprice = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double price = 11;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double priceDiff = 12;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getPricediff = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setPricediff = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double openPrice = 13;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getOpenprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setOpenprice = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double openPriceDiff = 14;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getOpenpricediff = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setOpenpricediff = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double positionProfit = 15;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getPositionprofit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setPositionprofit = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double positionProfitRatio = 16;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getPositionprofitratio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setPositionprofitratio = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional double openPositionProfit = 17;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getOpenpositionprofit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setOpenpositionprofit = function(value) {
  jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double openPositionProfitRatio = 18;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getOpenpositionprofitratio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setOpenpositionprofitratio = function(value) {
  jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional double useMargin = 19;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getUsemargin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 19, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setUsemargin = function(value) {
  jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional double exchangeMargin = 20;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getExchangemargin = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 20, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setExchangemargin = function(value) {
  jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional double contractValue = 21;
 * @return {number}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getContractvalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 21, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.PositionField.prototype.setContractvalue = function(value) {
  jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional HedgeFlagEnum hedgeFlag = 22;
 * @return {!proto.xyz.redtorch.pb.HedgeFlagEnum}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getHedgeflag = function() {
  return /** @type {!proto.xyz.redtorch.pb.HedgeFlagEnum} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {!proto.xyz.redtorch.pb.HedgeFlagEnum} value */
proto.xyz.redtorch.pb.PositionField.prototype.setHedgeflag = function(value) {
  jspb.Message.setProto3EnumField(this, 22, value);
};


/**
 * optional ContractField contract = 23;
 * @return {?proto.xyz.redtorch.pb.ContractField}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getContract = function() {
  return /** @type{?proto.xyz.redtorch.pb.ContractField} */ (
    jspb.Message.getWrapperField(this, proto.xyz.redtorch.pb.ContractField, 23));
};


/** @param {?proto.xyz.redtorch.pb.ContractField|undefined} value */
proto.xyz.redtorch.pb.PositionField.prototype.setContract = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.xyz.redtorch.pb.PositionField.prototype.clearContract = function() {
  this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xyz.redtorch.pb.PositionField.prototype.hasContract = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional string gatewayId = 24;
 * @return {string}
 */
proto.xyz.redtorch.pb.PositionField.prototype.getGatewayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.PositionField.prototype.setGatewayid = function(value) {
  jspb.Message.setProto3StringField(this, 24, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.TickField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xyz.redtorch.pb.TickField.repeatedFields_, null);
};
goog.inherits(proto.xyz.redtorch.pb.TickField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.TickField.displayName = 'proto.xyz.redtorch.pb.TickField';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xyz.redtorch.pb.TickField.repeatedFields_ = [33,34,35,36];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.TickField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.TickField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.TickField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.TickField.toObject = function(includeInstance, msg) {
  var f, obj = {
    unifiedsymbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tradingday: jspb.Message.getFieldWithDefault(msg, 3, ""),
    actionday: jspb.Message.getFieldWithDefault(msg, 4, ""),
    actiontime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    actiontimestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    status: jspb.Message.getFieldWithDefault(msg, 7, 0),
    lastprice: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    avgprice: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    totalbidvol: jspb.Message.getFieldWithDefault(msg, 10, 0),
    totalaskvol: jspb.Message.getFieldWithDefault(msg, 11, 0),
    weightedavgbidprice: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    weightedavgaskprice: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    iopv: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    yieldtomaturity: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    volumedelta: jspb.Message.getFieldWithDefault(msg, 16, 0),
    volume: jspb.Message.getFieldWithDefault(msg, 17, 0),
    turnover: +jspb.Message.getFieldWithDefault(msg, 18, 0.0),
    turnoverdelta: +jspb.Message.getFieldWithDefault(msg, 19, 0.0),
    numtrades: jspb.Message.getFieldWithDefault(msg, 20, 0),
    numtradesdelta: jspb.Message.getFieldWithDefault(msg, 21, 0),
    openinterest: +jspb.Message.getFieldWithDefault(msg, 22, 0.0),
    openinterestdelta: +jspb.Message.getFieldWithDefault(msg, 23, 0.0),
    preopeninterest: +jspb.Message.getFieldWithDefault(msg, 24, 0.0),
    precloseprice: +jspb.Message.getFieldWithDefault(msg, 25, 0.0),
    settleprice: +jspb.Message.getFieldWithDefault(msg, 26, 0.0),
    presettleprice: +jspb.Message.getFieldWithDefault(msg, 27, 0.0),
    openprice: +jspb.Message.getFieldWithDefault(msg, 28, 0.0),
    highprice: +jspb.Message.getFieldWithDefault(msg, 29, 0.0),
    lowprice: +jspb.Message.getFieldWithDefault(msg, 30, 0.0),
    upperlimit: +jspb.Message.getFieldWithDefault(msg, 31, 0.0),
    lowerlimit: +jspb.Message.getFieldWithDefault(msg, 32, 0.0),
    bidpriceList: jspb.Message.getRepeatedFloatingPointField(msg, 33),
    askpriceList: jspb.Message.getRepeatedFloatingPointField(msg, 34),
    bidvolumeList: jspb.Message.getRepeatedField(msg, 35),
    askvolumeList: jspb.Message.getRepeatedField(msg, 36)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.TickField}
 */
proto.xyz.redtorch.pb.TickField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.TickField;
  return proto.xyz.redtorch.pb.TickField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.TickField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.TickField}
 */
proto.xyz.redtorch.pb.TickField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnifiedsymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradingday(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionday(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setActiontime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setActiontimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setStatus(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLastprice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAvgprice(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTotalbidvol(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTotalaskvol(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightedavgbidprice(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWeightedavgaskprice(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIopv(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setYieldtomaturity(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setVolumedelta(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setVolume(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTurnover(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTurnoverdelta(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setNumtrades(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setNumtradesdelta(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpeninterest(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpeninterestdelta(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreopeninterest(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrecloseprice(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSettleprice(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPresettleprice(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpenprice(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHighprice(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLowprice(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUpperlimit(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLowerlimit(value);
      break;
    case 33:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setBidpriceList(value);
      break;
    case 34:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setAskpriceList(value);
      break;
    case 35:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setBidvolumeList(value);
      break;
    case 36:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed32());
      msg.setAskvolumeList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.TickField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.TickField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.TickField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.TickField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnifiedsymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGatewayid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTradingday();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getActionday();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getActiontime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getActiontimestamp();
  if (f !== 0) {
    writer.writeFixed64(
      6,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeFixed32(
      7,
      f
    );
  }
  f = message.getLastprice();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getAvgprice();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getTotalbidvol();
  if (f !== 0) {
    writer.writeFixed64(
      10,
      f
    );
  }
  f = message.getTotalaskvol();
  if (f !== 0) {
    writer.writeFixed64(
      11,
      f
    );
  }
  f = message.getWeightedavgbidprice();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getWeightedavgaskprice();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getIopv();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getYieldtomaturity();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getVolumedelta();
  if (f !== 0) {
    writer.writeFixed64(
      16,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeFixed64(
      17,
      f
    );
  }
  f = message.getTurnover();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getTurnoverdelta();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getNumtrades();
  if (f !== 0) {
    writer.writeFixed64(
      20,
      f
    );
  }
  f = message.getNumtradesdelta();
  if (f !== 0) {
    writer.writeFixed64(
      21,
      f
    );
  }
  f = message.getOpeninterest();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getOpeninterestdelta();
  if (f !== 0.0) {
    writer.writeDouble(
      23,
      f
    );
  }
  f = message.getPreopeninterest();
  if (f !== 0.0) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = message.getPrecloseprice();
  if (f !== 0.0) {
    writer.writeDouble(
      25,
      f
    );
  }
  f = message.getSettleprice();
  if (f !== 0.0) {
    writer.writeDouble(
      26,
      f
    );
  }
  f = message.getPresettleprice();
  if (f !== 0.0) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = message.getOpenprice();
  if (f !== 0.0) {
    writer.writeDouble(
      28,
      f
    );
  }
  f = message.getHighprice();
  if (f !== 0.0) {
    writer.writeDouble(
      29,
      f
    );
  }
  f = message.getLowprice();
  if (f !== 0.0) {
    writer.writeDouble(
      30,
      f
    );
  }
  f = message.getUpperlimit();
  if (f !== 0.0) {
    writer.writeDouble(
      31,
      f
    );
  }
  f = message.getLowerlimit();
  if (f !== 0.0) {
    writer.writeDouble(
      32,
      f
    );
  }
  f = message.getBidpriceList();
  if (f.length > 0) {
    writer.writePackedDouble(
      33,
      f
    );
  }
  f = message.getAskpriceList();
  if (f.length > 0) {
    writer.writePackedDouble(
      34,
      f
    );
  }
  f = message.getBidvolumeList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      35,
      f
    );
  }
  f = message.getAskvolumeList();
  if (f.length > 0) {
    writer.writePackedFixed32(
      36,
      f
    );
  }
};


/**
 * optional string unifiedSymbol = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.TickField.prototype.getUnifiedsymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TickField.prototype.setUnifiedsymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gatewayId = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.TickField.prototype.getGatewayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TickField.prototype.setGatewayid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tradingDay = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.TickField.prototype.getTradingday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TickField.prototype.setTradingday = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string actionDay = 4;
 * @return {string}
 */
proto.xyz.redtorch.pb.TickField.prototype.getActionday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TickField.prototype.setActionday = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string actionTime = 5;
 * @return {string}
 */
proto.xyz.redtorch.pb.TickField.prototype.getActiontime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.TickField.prototype.setActiontime = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional fixed64 actionTimestamp = 6;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getActiontimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setActiontimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional fixed32 status = 7;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setStatus = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional double lastPrice = 8;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getLastprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setLastprice = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double avgPrice = 9;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getAvgprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setAvgprice = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional fixed64 totalBidVol = 10;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getTotalbidvol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setTotalbidvol = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional fixed64 totalAskVol = 11;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getTotalaskvol = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setTotalaskvol = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional double weightedAvgBidPrice = 12;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getWeightedavgbidprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setWeightedavgbidprice = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double weightedAvgAskPrice = 13;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getWeightedavgaskprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setWeightedavgaskprice = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double iopv = 14;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getIopv = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setIopv = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double yieldToMaturity = 15;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getYieldtomaturity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setYieldtomaturity = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional fixed64 volumeDelta = 16;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getVolumedelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setVolumedelta = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional fixed64 volume = 17;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setVolume = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional double turnover = 18;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getTurnover = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 18, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setTurnover = function(value) {
  jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional double turnoverDelta = 19;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getTurnoverdelta = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 19, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setTurnoverdelta = function(value) {
  jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional fixed64 numTrades = 20;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getNumtrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setNumtrades = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional fixed64 numTradesDelta = 21;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getNumtradesdelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setNumtradesdelta = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional double openInterest = 22;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getOpeninterest = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 22, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setOpeninterest = function(value) {
  jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional double openInterestDelta = 23;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getOpeninterestdelta = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 23, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setOpeninterestdelta = function(value) {
  jspb.Message.setProto3FloatField(this, 23, value);
};


/**
 * optional double preOpenInterest = 24;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getPreopeninterest = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 24, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setPreopeninterest = function(value) {
  jspb.Message.setProto3FloatField(this, 24, value);
};


/**
 * optional double preClosePrice = 25;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getPrecloseprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 25, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setPrecloseprice = function(value) {
  jspb.Message.setProto3FloatField(this, 25, value);
};


/**
 * optional double settlePrice = 26;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getSettleprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 26, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setSettleprice = function(value) {
  jspb.Message.setProto3FloatField(this, 26, value);
};


/**
 * optional double preSettlePrice = 27;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getPresettleprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 27, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setPresettleprice = function(value) {
  jspb.Message.setProto3FloatField(this, 27, value);
};


/**
 * optional double openPrice = 28;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getOpenprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 28, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setOpenprice = function(value) {
  jspb.Message.setProto3FloatField(this, 28, value);
};


/**
 * optional double highPrice = 29;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getHighprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 29, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setHighprice = function(value) {
  jspb.Message.setProto3FloatField(this, 29, value);
};


/**
 * optional double lowPrice = 30;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getLowprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 30, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setLowprice = function(value) {
  jspb.Message.setProto3FloatField(this, 30, value);
};


/**
 * optional double upperLimit = 31;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getUpperlimit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 31, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setUpperlimit = function(value) {
  jspb.Message.setProto3FloatField(this, 31, value);
};


/**
 * optional double lowerLimit = 32;
 * @return {number}
 */
proto.xyz.redtorch.pb.TickField.prototype.getLowerlimit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 32, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.TickField.prototype.setLowerlimit = function(value) {
  jspb.Message.setProto3FloatField(this, 32, value);
};


/**
 * repeated double bidPrice = 33;
 * @return {!Array<number>}
 */
proto.xyz.redtorch.pb.TickField.prototype.getBidpriceList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 33));
};


/** @param {!Array<number>} value */
proto.xyz.redtorch.pb.TickField.prototype.setBidpriceList = function(value) {
  jspb.Message.setField(this, 33, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xyz.redtorch.pb.TickField.prototype.addBidprice = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 33, value, opt_index);
};


proto.xyz.redtorch.pb.TickField.prototype.clearBidpriceList = function() {
  this.setBidpriceList([]);
};


/**
 * repeated double askPrice = 34;
 * @return {!Array<number>}
 */
proto.xyz.redtorch.pb.TickField.prototype.getAskpriceList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 34));
};


/** @param {!Array<number>} value */
proto.xyz.redtorch.pb.TickField.prototype.setAskpriceList = function(value) {
  jspb.Message.setField(this, 34, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xyz.redtorch.pb.TickField.prototype.addAskprice = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 34, value, opt_index);
};


proto.xyz.redtorch.pb.TickField.prototype.clearAskpriceList = function() {
  this.setAskpriceList([]);
};


/**
 * repeated fixed32 bidVolume = 35;
 * @return {!Array<number>}
 */
proto.xyz.redtorch.pb.TickField.prototype.getBidvolumeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 35));
};


/** @param {!Array<number>} value */
proto.xyz.redtorch.pb.TickField.prototype.setBidvolumeList = function(value) {
  jspb.Message.setField(this, 35, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xyz.redtorch.pb.TickField.prototype.addBidvolume = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 35, value, opt_index);
};


proto.xyz.redtorch.pb.TickField.prototype.clearBidvolumeList = function() {
  this.setBidvolumeList([]);
};


/**
 * repeated fixed32 askVolume = 36;
 * @return {!Array<number>}
 */
proto.xyz.redtorch.pb.TickField.prototype.getAskvolumeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 36));
};


/** @param {!Array<number>} value */
proto.xyz.redtorch.pb.TickField.prototype.setAskvolumeList = function(value) {
  jspb.Message.setField(this, 36, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.xyz.redtorch.pb.TickField.prototype.addAskvolume = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 36, value, opt_index);
};


proto.xyz.redtorch.pb.TickField.prototype.clearAskvolumeList = function() {
  this.setAskvolumeList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.BarField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.BarField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.BarField.displayName = 'proto.xyz.redtorch.pb.BarField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.BarField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.BarField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.BarField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.BarField.toObject = function(includeInstance, msg) {
  var f, obj = {
    unifiedsymbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tradingday: jspb.Message.getFieldWithDefault(msg, 3, ""),
    actionday: jspb.Message.getFieldWithDefault(msg, 4, ""),
    actiontime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    actiontimestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    openprice: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    highprice: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    lowprice: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    closeprice: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    openinterest: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    openinterestdelta: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    volume: jspb.Message.getFieldWithDefault(msg, 13, 0),
    volumedelta: jspb.Message.getFieldWithDefault(msg, 14, 0),
    turnover: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    turnoverdelta: +jspb.Message.getFieldWithDefault(msg, 16, 0.0),
    numtrades: jspb.Message.getFieldWithDefault(msg, 17, 0),
    numtradesdelta: jspb.Message.getFieldWithDefault(msg, 18, 0),
    preopeninterest: +jspb.Message.getFieldWithDefault(msg, 19, 0.0),
    precloseprice: +jspb.Message.getFieldWithDefault(msg, 20, 0.0),
    presettleprice: +jspb.Message.getFieldWithDefault(msg, 21, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.BarField}
 */
proto.xyz.redtorch.pb.BarField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.BarField;
  return proto.xyz.redtorch.pb.BarField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.BarField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.BarField}
 */
proto.xyz.redtorch.pb.BarField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnifiedsymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradingday(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionday(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setActiontime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setActiontimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpenprice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHighprice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLowprice(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCloseprice(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpeninterest(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOpeninterestdelta(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setVolume(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setVolumedelta(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTurnover(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTurnoverdelta(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setNumtrades(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setNumtradesdelta(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreopeninterest(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrecloseprice(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPresettleprice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.BarField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.BarField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.BarField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.BarField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnifiedsymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGatewayid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTradingday();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getActionday();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getActiontime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getActiontimestamp();
  if (f !== 0) {
    writer.writeFixed64(
      6,
      f
    );
  }
  f = message.getOpenprice();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getHighprice();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getLowprice();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getCloseprice();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getOpeninterest();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getOpeninterestdelta();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeFixed64(
      13,
      f
    );
  }
  f = message.getVolumedelta();
  if (f !== 0) {
    writer.writeFixed64(
      14,
      f
    );
  }
  f = message.getTurnover();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getTurnoverdelta();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getNumtrades();
  if (f !== 0) {
    writer.writeFixed64(
      17,
      f
    );
  }
  f = message.getNumtradesdelta();
  if (f !== 0) {
    writer.writeFixed64(
      18,
      f
    );
  }
  f = message.getPreopeninterest();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getPrecloseprice();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getPresettleprice();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
};


/**
 * optional string unifiedSymbol = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.BarField.prototype.getUnifiedsymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.BarField.prototype.setUnifiedsymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gatewayId = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.BarField.prototype.getGatewayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.BarField.prototype.setGatewayid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tradingDay = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.BarField.prototype.getTradingday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.BarField.prototype.setTradingday = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string actionDay = 4;
 * @return {string}
 */
proto.xyz.redtorch.pb.BarField.prototype.getActionday = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.BarField.prototype.setActionday = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string actionTime = 5;
 * @return {string}
 */
proto.xyz.redtorch.pb.BarField.prototype.getActiontime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.BarField.prototype.setActiontime = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional fixed64 actionTimestamp = 6;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getActiontimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setActiontimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional double openPrice = 7;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getOpenprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setOpenprice = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double highPrice = 8;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getHighprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setHighprice = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double lowPrice = 9;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getLowprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setLowprice = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double closePrice = 10;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getCloseprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setCloseprice = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double openInterest = 11;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getOpeninterest = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setOpeninterest = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double openInterestDelta = 12;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getOpeninterestdelta = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setOpeninterestdelta = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional fixed64 volume = 13;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setVolume = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional fixed64 volumeDelta = 14;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getVolumedelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setVolumedelta = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional double turnover = 15;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getTurnover = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setTurnover = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double turnoverDelta = 16;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getTurnoverdelta = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setTurnoverdelta = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional fixed64 numTrades = 17;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getNumtrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setNumtrades = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional fixed64 numTradesDelta = 18;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getNumtradesdelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setNumtradesdelta = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional double preOpenInterest = 19;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getPreopeninterest = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 19, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setPreopeninterest = function(value) {
  jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional double preClosePrice = 20;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getPrecloseprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 20, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setPrecloseprice = function(value) {
  jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional double preSettlePrice = 21;
 * @return {number}
 */
proto.xyz.redtorch.pb.BarField.prototype.getPresettleprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 21, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.BarField.prototype.setPresettleprice = function(value) {
  jspb.Message.setProto3FloatField(this, 21, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.CommonReqField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.CommonReqField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.CommonReqField.displayName = 'proto.xyz.redtorch.pb.CommonReqField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.CommonReqField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.CommonReqField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.CommonReqField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.CommonReqField.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operatorid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetnodeid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sourcenodeid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.CommonReqField}
 */
proto.xyz.redtorch.pb.CommonReqField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.CommonReqField;
  return proto.xyz.redtorch.pb.CommonReqField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.CommonReqField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.CommonReqField}
 */
proto.xyz.redtorch.pb.CommonReqField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setTargetnodeid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSourcenodeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.CommonReqField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.CommonReqField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.CommonReqField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.CommonReqField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOperatorid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetnodeid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getSourcenodeid();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
};


/**
 * optional string reqId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.CommonReqField.prototype.getReqid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.CommonReqField.prototype.setReqid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string operatorId = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.CommonReqField.prototype.getOperatorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.CommonReqField.prototype.setOperatorid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional fixed32 targetNodeId = 3;
 * @return {number}
 */
proto.xyz.redtorch.pb.CommonReqField.prototype.getTargetnodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.CommonReqField.prototype.setTargetnodeid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 sourceNodeId = 4;
 * @return {number}
 */
proto.xyz.redtorch.pb.CommonReqField.prototype.getSourcenodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.CommonReqField.prototype.setSourcenodeid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.CommonRspField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.CommonRspField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.CommonRspField.displayName = 'proto.xyz.redtorch.pb.CommonRspField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.CommonRspField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.CommonRspField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.CommonRspField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.CommonRspField.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    errorid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    errormsg: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.CommonRspField}
 */
proto.xyz.redtorch.pb.CommonRspField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.CommonRspField;
  return proto.xyz.redtorch.pb.CommonRspField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.CommonRspField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.CommonRspField}
 */
proto.xyz.redtorch.pb.CommonRspField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReqid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setErrorid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.CommonRspField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.CommonRspField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.CommonRspField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.CommonRspField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getErrorid();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getErrormsg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string reqId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.CommonRspField.prototype.getReqid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.CommonRspField.prototype.setReqid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 errorId = 2;
 * @return {number}
 */
proto.xyz.redtorch.pb.CommonRspField.prototype.getErrorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.CommonRspField.prototype.setErrorid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string errorMsg = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.CommonRspField.prototype.getErrormsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.CommonRspField.prototype.setErrormsg = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.SubmitOrderReqField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.SubmitOrderReqField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.SubmitOrderReqField.displayName = 'proto.xyz.redtorch.pb.SubmitOrderReqField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.SubmitOrderReqField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.SubmitOrderReqField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.toObject = function(includeInstance, msg) {
  var f, obj = {
    originorderid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accountcode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    currency: jspb.Message.getFieldWithDefault(msg, 3, 0),
    contract: (f = msg.getContract()) && proto.xyz.redtorch.pb.ContractField.toObject(includeInstance, f),
    gatewayid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    volume: jspb.Message.getFieldWithDefault(msg, 6, 0),
    price: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    orderpricetype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    direction: jspb.Message.getFieldWithDefault(msg, 9, 0),
    offsetflag: jspb.Message.getFieldWithDefault(msg, 10, 0),
    hedgeflag: jspb.Message.getFieldWithDefault(msg, 11, 0),
    timecondition: jspb.Message.getFieldWithDefault(msg, 12, 0),
    gtddate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    volumecondition: jspb.Message.getFieldWithDefault(msg, 14, 0),
    minvolume: jspb.Message.getFieldWithDefault(msg, 15, 0),
    contingentcondition: jspb.Message.getFieldWithDefault(msg, 16, 0),
    stopprice: +jspb.Message.getFieldWithDefault(msg, 17, 0.0),
    forceclosereason: jspb.Message.getFieldWithDefault(msg, 18, 0),
    autosuspend: jspb.Message.getFieldWithDefault(msg, 19, 0),
    userforceclose: jspb.Message.getFieldWithDefault(msg, 20, 0),
    swaporder: jspb.Message.getFieldWithDefault(msg, 21, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.SubmitOrderReqField}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.SubmitOrderReqField;
  return proto.xyz.redtorch.pb.SubmitOrderReqField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.SubmitOrderReqField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.SubmitOrderReqField}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginorderid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountcode(value);
      break;
    case 3:
      var value = /** @type {!proto.xyz.redtorch.pb.CurrencyEnum} */ (reader.readEnum());
      msg.setCurrency(value);
      break;
    case 4:
      var value = new proto.xyz.redtorch.pb.ContractField;
      reader.readMessage(value,proto.xyz.redtorch.pb.ContractField.deserializeBinaryFromReader);
      msg.setContract(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setVolume(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrice(value);
      break;
    case 8:
      var value = /** @type {!proto.xyz.redtorch.pb.OrderPriceTypeEnum} */ (reader.readEnum());
      msg.setOrderpricetype(value);
      break;
    case 9:
      var value = /** @type {!proto.xyz.redtorch.pb.DirectionEnum} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 10:
      var value = /** @type {!proto.xyz.redtorch.pb.OffsetFlagEnum} */ (reader.readEnum());
      msg.setOffsetflag(value);
      break;
    case 11:
      var value = /** @type {!proto.xyz.redtorch.pb.HedgeFlagEnum} */ (reader.readEnum());
      msg.setHedgeflag(value);
      break;
    case 12:
      var value = /** @type {!proto.xyz.redtorch.pb.TimeConditionEnum} */ (reader.readEnum());
      msg.setTimecondition(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtddate(value);
      break;
    case 14:
      var value = /** @type {!proto.xyz.redtorch.pb.VolumeConditionEnum} */ (reader.readEnum());
      msg.setVolumecondition(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setMinvolume(value);
      break;
    case 16:
      var value = /** @type {!proto.xyz.redtorch.pb.ContingentConditionEnum} */ (reader.readEnum());
      msg.setContingentcondition(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStopprice(value);
      break;
    case 18:
      var value = /** @type {!proto.xyz.redtorch.pb.ForceCloseReasonEnum} */ (reader.readEnum());
      msg.setForceclosereason(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setAutosuspend(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setUserforceclose(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setSwaporder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.SubmitOrderReqField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.SubmitOrderReqField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOriginorderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountcode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCurrency();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getContract();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.xyz.redtorch.pb.ContractField.serializeBinaryToWriter
    );
  }
  f = message.getGatewayid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeFixed32(
      6,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getOrderpricetype();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getOffsetflag();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getHedgeflag();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getTimecondition();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getGtddate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getVolumecondition();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getMinvolume();
  if (f !== 0) {
    writer.writeFixed32(
      15,
      f
    );
  }
  f = message.getContingentcondition();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = message.getStopprice();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getForceclosereason();
  if (f !== 0.0) {
    writer.writeEnum(
      18,
      f
    );
  }
  f = message.getAutosuspend();
  if (f !== 0) {
    writer.writeFixed32(
      19,
      f
    );
  }
  f = message.getUserforceclose();
  if (f !== 0) {
    writer.writeFixed32(
      20,
      f
    );
  }
  f = message.getSwaporder();
  if (f !== 0) {
    writer.writeFixed32(
      21,
      f
    );
  }
};


/**
 * optional string originOrderId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getOriginorderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setOriginorderid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accountCode = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getAccountcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setAccountcode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional CurrencyEnum currency = 3;
 * @return {!proto.xyz.redtorch.pb.CurrencyEnum}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getCurrency = function() {
  return /** @type {!proto.xyz.redtorch.pb.CurrencyEnum} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.xyz.redtorch.pb.CurrencyEnum} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setCurrency = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional ContractField contract = 4;
 * @return {?proto.xyz.redtorch.pb.ContractField}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getContract = function() {
  return /** @type{?proto.xyz.redtorch.pb.ContractField} */ (
    jspb.Message.getWrapperField(this, proto.xyz.redtorch.pb.ContractField, 4));
};


/** @param {?proto.xyz.redtorch.pb.ContractField|undefined} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setContract = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.clearContract = function() {
  this.setContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.hasContract = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string gatewayId = 5;
 * @return {string}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getGatewayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setGatewayid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional fixed32 volume = 6;
 * @return {number}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setVolume = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional double price = 7;
 * @return {number}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional OrderPriceTypeEnum orderPriceType = 8;
 * @return {!proto.xyz.redtorch.pb.OrderPriceTypeEnum}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getOrderpricetype = function() {
  return /** @type {!proto.xyz.redtorch.pb.OrderPriceTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.xyz.redtorch.pb.OrderPriceTypeEnum} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setOrderpricetype = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional DirectionEnum direction = 9;
 * @return {!proto.xyz.redtorch.pb.DirectionEnum}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getDirection = function() {
  return /** @type {!proto.xyz.redtorch.pb.DirectionEnum} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.xyz.redtorch.pb.DirectionEnum} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setDirection = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional OffsetFlagEnum offsetFlag = 10;
 * @return {!proto.xyz.redtorch.pb.OffsetFlagEnum}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getOffsetflag = function() {
  return /** @type {!proto.xyz.redtorch.pb.OffsetFlagEnum} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.xyz.redtorch.pb.OffsetFlagEnum} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setOffsetflag = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional HedgeFlagEnum hedgeFlag = 11;
 * @return {!proto.xyz.redtorch.pb.HedgeFlagEnum}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getHedgeflag = function() {
  return /** @type {!proto.xyz.redtorch.pb.HedgeFlagEnum} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.xyz.redtorch.pb.HedgeFlagEnum} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setHedgeflag = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional TimeConditionEnum timeCondition = 12;
 * @return {!proto.xyz.redtorch.pb.TimeConditionEnum}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getTimecondition = function() {
  return /** @type {!proto.xyz.redtorch.pb.TimeConditionEnum} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {!proto.xyz.redtorch.pb.TimeConditionEnum} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setTimecondition = function(value) {
  jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional string gtdDate = 13;
 * @return {string}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getGtddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setGtddate = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional VolumeConditionEnum volumeCondition = 14;
 * @return {!proto.xyz.redtorch.pb.VolumeConditionEnum}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getVolumecondition = function() {
  return /** @type {!proto.xyz.redtorch.pb.VolumeConditionEnum} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {!proto.xyz.redtorch.pb.VolumeConditionEnum} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setVolumecondition = function(value) {
  jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional fixed32 minVolume = 15;
 * @return {number}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getMinvolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setMinvolume = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional ContingentConditionEnum contingentCondition = 16;
 * @return {!proto.xyz.redtorch.pb.ContingentConditionEnum}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getContingentcondition = function() {
  return /** @type {!proto.xyz.redtorch.pb.ContingentConditionEnum} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {!proto.xyz.redtorch.pb.ContingentConditionEnum} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setContingentcondition = function(value) {
  jspb.Message.setProto3EnumField(this, 16, value);
};


/**
 * optional double stopPrice = 17;
 * @return {number}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getStopprice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setStopprice = function(value) {
  jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional ForceCloseReasonEnum forceCloseReason = 18;
 * @return {!proto.xyz.redtorch.pb.ForceCloseReasonEnum}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getForceclosereason = function() {
  return /** @type {!proto.xyz.redtorch.pb.ForceCloseReasonEnum} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {!proto.xyz.redtorch.pb.ForceCloseReasonEnum} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setForceclosereason = function(value) {
  jspb.Message.setProto3EnumField(this, 18, value);
};


/**
 * optional fixed32 autoSuspend = 19;
 * @return {number}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getAutosuspend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setAutosuspend = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional fixed32 userForceClose = 20;
 * @return {number}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getUserforceclose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setUserforceclose = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional fixed32 swapOrder = 21;
 * @return {number}
 */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.getSwaporder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.SubmitOrderReqField.prototype.setSwaporder = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.CancelOrderReqField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.CancelOrderReqField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.CancelOrderReqField.displayName = 'proto.xyz.redtorch.pb.CancelOrderReqField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.CancelOrderReqField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.CancelOrderReqField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.CancelOrderReqField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.CancelOrderReqField.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orderid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    originorderid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.CancelOrderReqField}
 */
proto.xyz.redtorch.pb.CancelOrderReqField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.CancelOrderReqField;
  return proto.xyz.redtorch.pb.CancelOrderReqField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.CancelOrderReqField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.CancelOrderReqField}
 */
proto.xyz.redtorch.pb.CancelOrderReqField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginorderid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.CancelOrderReqField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.CancelOrderReqField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.CancelOrderReqField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.CancelOrderReqField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewayid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrderid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOriginorderid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string gatewayId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.CancelOrderReqField.prototype.getGatewayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.CancelOrderReqField.prototype.setGatewayid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string orderId = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.CancelOrderReqField.prototype.getOrderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.CancelOrderReqField.prototype.setOrderid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string originOrderId = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.CancelOrderReqField.prototype.getOriginorderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.CancelOrderReqField.prototype.setOriginorderid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.GatewaySettingField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.GatewaySettingField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.GatewaySettingField.displayName = 'proto.xyz.redtorch.pb.GatewaySettingField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.GatewaySettingField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.GatewaySettingField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.GatewaySettingField.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gatewayname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gatewaydescription: jspb.Message.getFieldWithDefault(msg, 4, ""),
    implementclassname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    gatewaytype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    gatewayadaptertype: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ctpapisetting: (f = msg.getCtpapisetting()) && proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.toObject(includeInstance, f),
    ibapisetting: (f = msg.getIbapisetting()) && proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 10, 0),
    version: jspb.Message.getFieldWithDefault(msg, 11, 0),
    autoconnecttimeranges: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.GatewaySettingField}
 */
proto.xyz.redtorch.pb.GatewaySettingField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.GatewaySettingField;
  return proto.xyz.redtorch.pb.GatewaySettingField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.GatewaySettingField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.GatewaySettingField}
 */
proto.xyz.redtorch.pb.GatewaySettingField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewaydescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setImplementclassname(value);
      break;
    case 6:
      var value = /** @type {!proto.xyz.redtorch.pb.GatewayTypeEnum} */ (reader.readEnum());
      msg.setGatewaytype(value);
      break;
    case 7:
      var value = /** @type {!proto.xyz.redtorch.pb.GatewayAdapterTypeEnum} */ (reader.readEnum());
      msg.setGatewayadaptertype(value);
      break;
    case 8:
      var value = new proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField;
      reader.readMessage(value,proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.deserializeBinaryFromReader);
      msg.setCtpapisetting(value);
      break;
    case 9:
      var value = new proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField;
      reader.readMessage(value,proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.deserializeBinaryFromReader);
      msg.setIbapisetting(value);
      break;
    case 10:
      var value = /** @type {!proto.xyz.redtorch.pb.ConnectStatusEnum} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setVersion(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAutoconnecttimeranges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.GatewaySettingField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.GatewaySettingField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.GatewaySettingField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewayid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGatewayname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGatewaydescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getImplementclassname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGatewaytype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getGatewayadaptertype();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getCtpapisetting();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.serializeBinaryToWriter
    );
  }
  f = message.getIbapisetting();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeFixed64(
      11,
      f
    );
  }
  f = message.getAutoconnecttimeranges();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.displayName = 'proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    brokerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tdhost: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tdport: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mdhost: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mdport: jspb.Message.getFieldWithDefault(msg, 7, ""),
    authcode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    userproductinfo: jspb.Message.getFieldWithDefault(msg, 9, ""),
    appid: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField;
  return proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrokerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTdhost(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTdport(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMdhost(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMdport(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthcode(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserproductinfo(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBrokerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTdhost();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTdport();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMdhost();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMdport();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAuthcode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUserproductinfo();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAppid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string brokerId = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.getBrokerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.setBrokerid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tdHost = 4;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.getTdhost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.setTdhost = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string tdPort = 5;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.getTdport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.setTdport = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string mdHost = 6;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.getMdhost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.setMdhost = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string mdPort = 7;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.getMdport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.setMdport = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string authCode = 8;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.getAuthcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.setAuthcode = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string userProductInfo = 9;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.getUserproductinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.setUserproductinfo = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string appId = 10;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField.prototype.setAppid = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.displayName = 'proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clientid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField}
 */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField;
  return proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField}
 */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setClientid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeFixed32(
      2,
      f
    );
  }
  f = message.getClientid();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.prototype.setHost = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional fixed32 port = 2;
 * @return {number}
 */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 clientId = 3;
 * @return {number}
 */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.prototype.getClientid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField.prototype.setClientid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string gatewayId = 1;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.getGatewayid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.setGatewayid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gatewayName = 2;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.getGatewayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.setGatewayname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string gatewayDescription = 4;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.getGatewaydescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.setGatewaydescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string implementClassName = 5;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.getImplementclassname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.setImplementclassname = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional GatewayTypeEnum gatewayType = 6;
 * @return {!proto.xyz.redtorch.pb.GatewayTypeEnum}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.getGatewaytype = function() {
  return /** @type {!proto.xyz.redtorch.pb.GatewayTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.xyz.redtorch.pb.GatewayTypeEnum} value */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.setGatewaytype = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional GatewayAdapterTypeEnum gatewayAdapterType = 7;
 * @return {!proto.xyz.redtorch.pb.GatewayAdapterTypeEnum}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.getGatewayadaptertype = function() {
  return /** @type {!proto.xyz.redtorch.pb.GatewayAdapterTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.xyz.redtorch.pb.GatewayAdapterTypeEnum} value */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.setGatewayadaptertype = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional CtpApiSettingField ctpApiSetting = 8;
 * @return {?proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.getCtpapisetting = function() {
  return /** @type{?proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField} */ (
    jspb.Message.getWrapperField(this, proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField, 8));
};


/** @param {?proto.xyz.redtorch.pb.GatewaySettingField.CtpApiSettingField|undefined} value */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.setCtpapisetting = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.xyz.redtorch.pb.GatewaySettingField.prototype.clearCtpapisetting = function() {
  this.setCtpapisetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.hasCtpapisetting = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional IbApiSettingField ibApiSetting = 9;
 * @return {?proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.getIbapisetting = function() {
  return /** @type{?proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField} */ (
    jspb.Message.getWrapperField(this, proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField, 9));
};


/** @param {?proto.xyz.redtorch.pb.GatewaySettingField.IbApiSettingField|undefined} value */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.setIbapisetting = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.xyz.redtorch.pb.GatewaySettingField.prototype.clearIbapisetting = function() {
  this.setIbapisetting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.hasIbapisetting = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ConnectStatusEnum status = 10;
 * @return {!proto.xyz.redtorch.pb.ConnectStatusEnum}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.getStatus = function() {
  return /** @type {!proto.xyz.redtorch.pb.ConnectStatusEnum} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {!proto.xyz.redtorch.pb.ConnectStatusEnum} value */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional fixed64 version = 11;
 * @return {number}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string autoConnectTimeRanges = 12;
 * @return {string}
 */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.getAutoconnecttimeranges = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.GatewaySettingField.prototype.setAutoconnecttimeranges = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.LogField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.LogField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.LogField.displayName = 'proto.xyz.redtorch.pb.LogField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.LogField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.LogField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.LogField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.LogField.toObject = function(includeInstance, msg) {
  var f, obj = {
    loglevel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    content: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.LogField}
 */
proto.xyz.redtorch.pb.LogField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.LogField;
  return proto.xyz.redtorch.pb.LogField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.LogField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.LogField}
 */
proto.xyz.redtorch.pb.LogField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xyz.redtorch.pb.LogLevelEnum} */ (reader.readEnum());
      msg.setLoglevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.LogField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.LogField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.LogField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.LogField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoglevel();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional LogLevelEnum logLevel = 1;
 * @return {!proto.xyz.redtorch.pb.LogLevelEnum}
 */
proto.xyz.redtorch.pb.LogField.prototype.getLoglevel = function() {
  return /** @type {!proto.xyz.redtorch.pb.LogLevelEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.xyz.redtorch.pb.LogLevelEnum} value */
proto.xyz.redtorch.pb.LogField.prototype.setLoglevel = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional fixed64 timestamp = 2;
 * @return {number}
 */
proto.xyz.redtorch.pb.LogField.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.LogField.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.LogField.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.LogField.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xyz.redtorch.pb.NoticeField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xyz.redtorch.pb.NoticeField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xyz.redtorch.pb.NoticeField.displayName = 'proto.xyz.redtorch.pb.NoticeField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xyz.redtorch.pb.NoticeField.prototype.toObject = function(opt_includeInstance) {
  return proto.xyz.redtorch.pb.NoticeField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xyz.redtorch.pb.NoticeField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.NoticeField.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    content: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xyz.redtorch.pb.NoticeField}
 */
proto.xyz.redtorch.pb.NoticeField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xyz.redtorch.pb.NoticeField;
  return proto.xyz.redtorch.pb.NoticeField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xyz.redtorch.pb.NoticeField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xyz.redtorch.pb.NoticeField}
 */
proto.xyz.redtorch.pb.NoticeField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xyz.redtorch.pb.CommonStatusEnum} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xyz.redtorch.pb.NoticeField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xyz.redtorch.pb.NoticeField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xyz.redtorch.pb.NoticeField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xyz.redtorch.pb.NoticeField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional CommonStatusEnum status = 1;
 * @return {!proto.xyz.redtorch.pb.CommonStatusEnum}
 */
proto.xyz.redtorch.pb.NoticeField.prototype.getStatus = function() {
  return /** @type {!proto.xyz.redtorch.pb.CommonStatusEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.xyz.redtorch.pb.CommonStatusEnum} value */
proto.xyz.redtorch.pb.NoticeField.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional fixed64 timestamp = 2;
 * @return {number}
 */
proto.xyz.redtorch.pb.NoticeField.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xyz.redtorch.pb.NoticeField.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.xyz.redtorch.pb.NoticeField.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xyz.redtorch.pb.NoticeField.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.xyz.redtorch.pb);
